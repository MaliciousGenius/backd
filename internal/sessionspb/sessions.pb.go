// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sessions.proto

package sessionspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CreateSessionRequest contains the needed information to create
//   and maintain a new session
type CreateSessionRequest struct {
	DomainId             string   `protobuf:"bytes,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	UserId               string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DurationSeconds      int64    `protobuf:"varint,3,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSessionRequest) Reset()         { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()    {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0475a55364240b58, []int{0}
}

func (m *CreateSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSessionRequest.Unmarshal(m, b)
}
func (m *CreateSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSessionRequest.Marshal(b, m, deterministic)
}
func (m *CreateSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSessionRequest.Merge(m, src)
}
func (m *CreateSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSessionRequest.Size(m)
}
func (m *CreateSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSessionRequest proto.InternalMessageInfo

func (m *CreateSessionRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *CreateSessionRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateSessionRequest) GetDurationSeconds() int64 {
	if m != nil {
		return m.DurationSeconds
	}
	return 0
}

// Session is the session data that is shared with other services
type Session struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             string   `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Groups               []string `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	ExpiresAt            int64    `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	CreatedAt            int64    `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_0475a55364240b58, []int{1}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *Session) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Session) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Session) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *Session) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// GetSessionRequest contains the needed information to create
//   and maintain a new session
type GetSessionRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId             string   `protobuf:"bytes,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	UserId               string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSessionRequest) Reset()         { *m = GetSessionRequest{} }
func (m *GetSessionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSessionRequest) ProtoMessage()    {}
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0475a55364240b58, []int{2}
}

func (m *GetSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSessionRequest.Unmarshal(m, b)
}
func (m *GetSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSessionRequest.Marshal(b, m, deterministic)
}
func (m *GetSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSessionRequest.Merge(m, src)
}
func (m *GetSessionRequest) XXX_Size() int {
	return xxx_messageInfo_GetSessionRequest.Size(m)
}
func (m *GetSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSessionRequest proto.InternalMessageInfo

func (m *GetSessionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetSessionRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

func (m *GetSessionRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Result is used for deletes to return a boolean result to show success
type Result struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_0475a55364240b58, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*CreateSessionRequest)(nil), "sessionspb.CreateSessionRequest")
	proto.RegisterType((*Session)(nil), "sessionspb.Session")
	proto.RegisterType((*GetSessionRequest)(nil), "sessionspb.GetSessionRequest")
	proto.RegisterType((*Result)(nil), "sessionspb.Result")
}

func init() { proto.RegisterFile("sessions.proto", fileDescriptor_0475a55364240b58) }

var fileDescriptor_0475a55364240b58 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x4e, 0x32, 0x41,
	0x10, 0x64, 0x77, 0xbf, 0x6f, 0x81, 0x4e, 0x40, 0x1d, 0x8d, 0x6e, 0x34, 0x24, 0x9b, 0x39, 0xe1,
	0x85, 0x83, 0x3e, 0x01, 0x4a, 0xa2, 0x5c, 0x97, 0x93, 0x27, 0xb2, 0x30, 0x1d, 0x33, 0x09, 0xee,
	0xac, 0xd3, 0xb3, 0xd1, 0x17, 0xf2, 0xb5, 0x7c, 0x16, 0x33, 0x3f, 0x08, 0xa8, 0xc4, 0x8b, 0xb7,
	0xa9, 0xaa, 0x4e, 0x57, 0x75, 0xf7, 0x40, 0x9f, 0x90, 0x48, 0xaa, 0x8a, 0x46, 0xb5, 0x56, 0x46,
	0x31, 0x58, 0xe3, 0x7a, 0xc1, 0x5f, 0xe0, 0xe4, 0x56, 0x63, 0x69, 0x70, 0xe6, 0xb9, 0x02, 0x9f,
	0x1b, 0x24, 0xc3, 0x2e, 0xa0, 0x2b, 0xd4, 0x53, 0x29, 0xab, 0xb9, 0x14, 0x59, 0x94, 0x47, 0xc3,
	0x6e, 0xd1, 0xf1, 0xc4, 0x54, 0xb0, 0x33, 0x68, 0x37, 0x84, 0xda, 0x4a, 0xb1, 0x93, 0x52, 0x0b,
	0xa7, 0x82, 0x5d, 0xc2, 0xa1, 0x68, 0x74, 0x69, 0xa4, 0xaa, 0xe6, 0x84, 0x4b, 0x55, 0x09, 0xca,
	0x92, 0x3c, 0x1a, 0x26, 0xc5, 0xc1, 0x9a, 0x9f, 0x79, 0x9a, 0xbf, 0x45, 0xd0, 0x0e, 0x9e, 0xac,
	0x0f, 0xf1, 0xa7, 0x4b, 0x2c, 0xc5, 0xae, 0x79, 0xbc, 0xdf, 0x3c, 0xd9, 0x31, 0x3f, 0x85, 0xf4,
	0x51, 0xab, 0xa6, 0xa6, 0xec, 0x5f, 0x9e, 0x58, 0xde, 0x23, 0x36, 0x00, 0xc0, 0xd7, 0x5a, 0x6a,
	0xa4, 0x79, 0x69, 0xb2, 0xff, 0x2e, 0x4e, 0x37, 0x30, 0x63, 0x63, 0xe5, 0xa5, 0xdb, 0x80, 0xb0,
	0x72, 0xea, 0xe5, 0xc0, 0x8c, 0x0d, 0x7f, 0x80, 0xa3, 0x3b, 0x34, 0x5f, 0xb6, 0xf3, 0x27, 0x81,
	0x79, 0x0e, 0x69, 0x81, 0xd4, 0xac, 0x8c, 0x8d, 0xae, 0xdd, 0xcb, 0xf5, 0xec, 0x14, 0x01, 0x5d,
	0xbd, 0x47, 0xd0, 0x09, 0xd6, 0xc4, 0xee, 0xa1, 0xb7, 0x73, 0x2a, 0x96, 0x8f, 0x36, 0x87, 0x1c,
	0xfd, 0x74, 0xc5, 0xf3, 0xe3, 0xed, 0x8a, 0xa0, 0xf1, 0x16, 0xbb, 0x01, 0xd8, 0xcc, 0xc4, 0x06,
	0xdb, 0x45, 0xdf, 0x66, 0xdd, 0xd7, 0x63, 0x02, 0xbd, 0x09, 0xae, 0x70, 0x93, 0xe6, 0x97, 0x36,
	0x6c, 0x5b, 0xf6, 0x63, 0xf3, 0xd6, 0x22, 0x75, 0x3f, 0xf2, 0xfa, 0x23, 0x00, 0x00, 0xff, 0xff,
	0x60, 0xf6, 0x51, 0x91, 0xa3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionsClient is the client API for Sessions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionsClient interface {
	// CreateSession ask for a session creation
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// GetSession returns a session already established
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error)
	// DeleteSession removes a session if exists, returns transaction status as result
	DeleteSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Result, error)
}

type sessionsClient struct {
	cc *grpc.ClientConn
}

func NewSessionsClient(cc *grpc.ClientConn) SessionsClient {
	return &sessionsClient{cc}
}

func (c *sessionsClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/sessionspb.Sessions/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/sessionspb.Sessions/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) DeleteSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/sessionspb.Sessions/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionsServer is the server API for Sessions service.
type SessionsServer interface {
	// CreateSession ask for a session creation
	CreateSession(context.Context, *CreateSessionRequest) (*Session, error)
	// GetSession returns a session already established
	GetSession(context.Context, *GetSessionRequest) (*Session, error)
	// DeleteSession removes a session if exists, returns transaction status as result
	DeleteSession(context.Context, *GetSessionRequest) (*Result, error)
}

func RegisterSessionsServer(s *grpc.Server, srv SessionsServer) {
	s.RegisterService(&_Sessions_serviceDesc, srv)
}

func _Sessions_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionspb.Sessions/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionspb.Sessions/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sessionspb.Sessions/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).DeleteSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sessionspb.Sessions",
	HandlerType: (*SessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Sessions_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _Sessions_GetSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Sessions_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sessions.proto",
}
